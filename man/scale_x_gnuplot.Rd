% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggnuplot.R
\name{scale_x_gnuplot}
\alias{scale_x_gnuplot}
\alias{gnubreaks}
\alias{gnulimits}
\alias{scale_y_gnuplot}
\title{gnuplot axes for ggplot2}
\usage{
scale_x_gnuplot(breaks = 4, index = NULL, facet = FALSE, ...)
scale_y_gnuplot(breaks = 4, index = NULL, facet = FALSE, ...)
gnulimits(breaks = 4)
gnubreaks(breaks = 4, index = NULL)
}
\arguments{
\item{breaks}{The number of (inner) ticks on the axis}

\item{index}{If not \code{NULL}, an index to subset the ticks, e.g. \code{-1} to
exclude the tick/label on the left or bottom corner.}

\item{facet}{Whether the plot uses facets or not. If \code{TRUE}, the secondary
axis is exluded.}

\item{...}{
  Arguments passed on to \code{\link[ggplot2:scale_x_continuous]{ggplot2::scale_x_continuous}}
  \describe{
    \item{\code{name}}{The name of the scale. Used as the axis or legend title. If
\code{waiver()}, the default, the name of the scale is taken from the first
mapping used for that aesthetic. If \code{NULL}, the legend title will be
omitted.}
    \item{\code{minor_breaks}}{One of:
\itemize{
\item \code{NULL} for no minor breaks
\item \code{waiver()} for the default breaks (one minor break between
each major break)
\item A numeric vector of positions
\item A function that given the limits returns a vector of minor breaks.
}}
    \item{\code{labels}}{One of:
\itemize{
\item \code{NULL} for no labels
\item \code{waiver()} for the default labels computed by the
transformation object
\item A character vector giving labels (must be same length as \code{breaks})
\item A function that takes the breaks as input and returns labels
as output
}}
    \item{\code{limits}}{One of:
\itemize{
\item \code{NULL} to use the default scale range
\item A numeric vector of length two providing limits of the scale.
Use \code{NA} to refer to the existing minimum or maximum
\item A function that accepts the existing (automatic) limits and returns
new limits
}}
    \item{\code{expand}}{Vector of range expansion constants used to add some
padding around the data, to ensure that they are placed some distance
away from the axes. Use the convenience function \code{\link[ggplot2:expand_scale]{expand_scale()}}
to generate the values for the \code{expand} argument. The defaults are to
expand the scale by 5\% on each side for continuous variables, and by
0.6 units on each side for discrete variables.}
    \item{\code{oob}}{Function that handles limits outside of the scale limits
(out of bounds). The default replaces out of bounds values with \code{NA}.}
    \item{\code{na.value}}{Missing values will be replaced with this value.}
    \item{\code{trans}}{Either the name of a transformation object, or the
object itself. Built-in transformations include "asn", "atanh",
"boxcox", "date", "exp", "hms", "identity", "log", "log10", "log1p", "log2",
"logit", "modulus", "probability", "probit", "pseudo_log", "reciprocal",
"reverse", "sqrt" and "time".

A transformation object bundles together a transform, its inverse,
and methods for generating breaks and labels. Transformation objects
are defined in the scales package, and are called \code{name_trans}, e.g.
\code{\link[scales:boxcox_trans]{scales::boxcox_trans()}}. You can create your own
transformation with \code{\link[scales:trans_new]{scales::trans_new()}}.}
    \item{\code{position}}{The position of the axis. "left" or "right" for vertical
scales, "top" or "bottom" for horizontal scales}
    \item{\code{sec.axis}}{specify a secondary axis}
  }}
}
\description{
These functions try to resemble the way gnuplot chooses the axis limits and
breaks/ticks. They set up secondary axes and ticks/labels on the corners of
the plot.
}
\examples{
library(ggplot2)

ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
  geom_point() +
  scale_color_gnuplot() +
  scale_x_gnuplot() +
  scale_y_gnuplot() +
  theme_gnuplot()

# Alternatively, without the secondary axis:
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
  geom_point() +
  scale_color_gnuplot() +
  scale_x_continuous(breaks = gnubreaks(), limits = gnulimits()) +
  scale_y_continuous(breaks = gnubreaks(), limits = gnulimits()) +
  theme_gnuplot()

gnulimits()(limits = c(10, 990))
gnubreaks()(limits = c(0, 1000))
}
